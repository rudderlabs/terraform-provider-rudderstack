HOSTNAME=rudderstack.com
NAMESPACE=rudderlabs
NAME=rudderstack
BINARY=terraform-provider-${NAME}
VERSION=4.0.0
OS_ARCH=$(shell go env GOOS)_$(shell go env GOARCH)

default: install

.PHONY: build
build:
	go build -o ${BINARY}

.PHONY: release
release:
	GOOS=darwin GOARCH=amd64 go build -o ./bin/${BINARY}_${VERSION}_darwin_amd64
	GOOS=darwin GOARCH=arm64 go build -o ./bin/${BINARY}_${VERSION}_darwin_arm64
	GOOS=freebsd GOARCH=386 go build -o ./bin/${BINARY}_${VERSION}_freebsd_386
	GOOS=freebsd GOARCH=amd64 go build -o ./bin/${BINARY}_${VERSION}_freebsd_amd64
	GOOS=freebsd GOARCH=arm go build -o ./bin/${BINARY}_${VERSION}_freebsd_arm
	GOOS=linux GOARCH=386 go build -o ./bin/${BINARY}_${VERSION}_linux_386
	GOOS=linux GOARCH=amd64 go build -o ./bin/${BINARY}_${VERSION}_linux_amd64
	GOOS=linux GOARCH=arm go build -o ./bin/${BINARY}_${VERSION}_linux_arm
	GOOS=openbsd GOARCH=386 go build -o ./bin/${BINARY}_${VERSION}_openbsd_386
	GOOS=openbsd GOARCH=amd64 go build -o ./bin/${BINARY}_${VERSION}_openbsd_amd64
	GOOS=solaris GOARCH=amd64 go build -o ./bin/${BINARY}_${VERSION}_solaris_amd64
	GOOS=windows GOARCH=386 go build -o ./bin/${BINARY}_${VERSION}_windows_386
	GOOS=windows GOARCH=amd64 go build -o ./bin/${BINARY}_${VERSION}_windows_amd64

.PHONY: install
install: build
	mkdir -p ~/.terraform.d/plugins/${HOSTNAME}/${NAMESPACE}/${NAME}/${VERSION}/${OS_ARCH}
	ln -f ${BINARY} ~/.terraform.d/plugins/${HOSTNAME}/${NAMESPACE}/${NAME}/${VERSION}/${OS_ARCH}

.PHONY: test
test:
	go test -timeout 60s ./...

.PHONY: testacc
testacc:
	TF_ACC=1 go test $(TEST) -v $(TESTARGS) -timeout 120m

.PHONY: docs
docs:
	go run github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs

.PHONY: fmt
fmt: ## Formats all go files
	gofumpt -l -w -extra  .
	find . -type f -name '*.go' -exec grep -L -E 'Code generated by .*\. DO NOT EDIT.' {} + | xargs goimports -format-only -w -local=github.com/rudderlabs

.PHONY: test-ci
test-ci:
	go test ./... -timeout 30m

.PHONY: dev-setup
dev-setup: build
	@echo "üî® Building terraform-provider-rudderstack..."
	@echo "üìÅ Setting up local provider directory structure..."
	@mkdir -p test/.terraform/plugins/registry.terraform.io/rudderlabs/rudderstack/3.1.1/darwin_arm64
	@echo "üìã Copying local binary to test directory..."
	@cp ${BINARY} test/.terraform/plugins/registry.terraform.io/rudderlabs/rudderstack/3.1.1/darwin_arm64/terraform-provider-rudderstack_v3.1.1
	@echo "üßπ Cleaning up previous Terraform state..."
	@cd test && rm -rf .terraform .terraform.lock.hcl
	@echo "üìÅ Recreating provider directory structure..."
	@mkdir -p test/.terraform/plugins/registry.terraform.io/rudderlabs/rudderstack/3.1.1/darwin_arm64
	@echo "üìã Re-copying local binary to test directory..."
	@cp ${BINARY} test/.terraform/plugins/registry.terraform.io/rudderlabs/rudderstack/3.1.1/darwin_arm64/terraform-provider-rudderstack_v3.1.1
	@echo "üöÄ Initializing Terraform with local provider..."
	@cd test && terraform init -plugin-dir=.terraform/plugins
	@echo "‚úÖ Local provider setup complete!"
	@echo "üìù You can now run:"
	@echo "   cd test && terraform plan"
	@echo "   cd test && terraform apply"

.PHONY: dev-test
dev-test: dev-setup
	@echo "üß™ Running Terraform plan with local provider..."
	@cd test && terraform plan

.PHONY: dev-apply
dev-apply: dev-setup
	@echo "üöÄ Running Terraform apply with local provider..."
	@cd test && terraform apply

.PHONY: dev-clean
dev-clean:
	@echo "üßπ Cleaning up test environment..."
	@cd test && rm -rf .terraform .terraform.lock.hcl
	@echo "‚úÖ Test environment cleaned up!"